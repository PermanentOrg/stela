name: Deploy to dev
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  run_tests:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  build:
    needs:
      - run_tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Generate Image Tag
        run: echo "IMAGE_TAG=364159549467.dkr.ecr.$AWS_REGION.amazonaws.com/stela:$([[ ${GITHUB_REF##*/} = main ]] && echo main || echo feature)-$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Build Image
        run: docker build -t $IMAGE_TAG ./apps/api
      - name: AWS Login
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 364159549467.dkr.ecr.$AWS_REGION.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Publish Image to ECR
        run: docker push $IMAGE_TAG
  deploy:
    needs:
      - build
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./terraform/test_cluster
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
      - name: Generate Image Tag
        run: echo "IMAGE_TAG=364159549467.dkr.ecr.$AWS_REGION.amazonaws.com/stela:$([[ ${GITHUB_REF##*/} = main ]] && echo main || echo feature)-$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      # Note that while Terraform requires us to pass a value of stela_staging_image below, it won't be used because the
      # -target option restricts terraform to just updating the dev deployment
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var="stela_dev_image=$IMAGE_TAG" -var="stela_staging_image=$IMAGE_TAG" -target=kubernetes_deployment.stela_dev
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var="stela_dev_image=$IMAGE_TAG" -var="stela_staging_image=$IMAGE_TAG" -target=kubernetes_deployment.stela_dev
